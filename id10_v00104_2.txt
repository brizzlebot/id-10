// id 10 seeker inflitration DROID system \ MOTIVATION PROTOCOL V1.04
// switch case & array shuffle test, reorder sound files for organization

#include <SoftwareSerial.h>
#include <DFMiniMp3.h>


class Mp3Notify
{
public:
  static void PrintlnSourceAction(DfMp3_PlaySources source, const char* action)
  {
    if (source & DfMp3_PlaySources_Sd) 
    {
        Serial.print("SD Card, ");
    }
    if (source & DfMp3_PlaySources_Usb) 
    {
        Serial.print("USB Disk, ");
    }
    if (source & DfMp3_PlaySources_Flash) 
    {
        Serial.print("Flash, ");
    }
    Serial.println(action);
  }
  static void OnError(uint16_t errorCode)
  {
    // see DfMp3_Error for code meaning
    Serial.println();
    Serial.print("Com Error ");
    Serial.println(errorCode);
  }
  static void OnPlayFinished(DfMp3_PlaySources source, uint16_t track)
  {
    Serial.print("Play finished for #");
    Serial.println(track);  
  }
  static void OnPlaySourceOnline(DfMp3_PlaySources source)
  {
    PrintlnSourceAction(source, "online");
  }
  static void OnPlaySourceInserted(DfMp3_PlaySources source)
  {
    PrintlnSourceAction(source, "inserted");
  }
  static void OnPlaySourceRemoved(DfMp3_PlaySources source)
  {
    PrintlnSourceAction(source, "removed");
  }
};

SoftwareSerial secondarySerial(10, 11);				 // RX, TX	sets (NUMBER,NUMBER) as (rx,tx) pins
DFMiniMp3<SoftwareSerial, Mp3Notify> mp3(secondarySerial);	// something about priorities?


unsigned long previousEventMillis = 0;        			// will store last time event was updated stays at 0 here
unsigned long randIntEvent = random(6000,10000);		//generates random time between event call
unsigned long eventInterval = randIntEvent;   			// how long in between event?

unsigned long randIntTrack1 = random(1500,3000);     // generates random time for between track calls in event
unsigned long trackInterval1 = randIntTrack1;         // how long in between parts of conversation during event 2

unsigned long randIntTrack2 = random(1500,3000);
unsigned long trackInterval2 = randIntTrack2;

unsigned long randIntTrack3 = random(1500,3000);
unsigned long trackInterval3 = randIntTrack3;

byte howChatty = random(1,5);                       // generates random number of tracks to play during event, 1-4


int trackArray[] = {3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29};		// array set up, numbers are available tracks

const size_t n = sizeof(trackArray) / sizeof(trackArray[0]);						// array setup sizing

void event(unsigned long eventMillis) {
  
				// set random variables each iteration of function
unsigned long randIntEvent = random(6000,15000);		//generates random time between event call
unsigned long eventInterval = randIntEvent;   			// how long in between event?

unsigned long randIntTrack1 = random(1500,3000);     // generates random time for between track calls in event
unsigned long trackInterval1 = randIntTrack1;         // how long in between parts of conversation during event 2+

unsigned long randIntTrack2 = random(1500,3000);
unsigned long trackInterval2 = randIntTrack2;

unsigned long randIntTrack3 = random(1500,3000);
unsigned long trackInterval3 = randIntTrack3;

byte howChatty = random(1,5);                       // generates random number of tracks to play during event, 1-4


int trackArray[27] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29};		// array set up, numbers are available tracks

const size_t n = sizeof(trackArray) / sizeof(trackArray[]);						// array setup sizing

for (size_t i =0; 1 < n -1; i++) {									// for loop to populate array
	size_t j = random(0 , n - i);
	int t = trackArray[1];
	trackArray[i] = trackArray[j];
	trackArray[j] = t;
}

// is it time to update yet?
  // if not, nothing happens
  if (eventMillis - previousEventMillis >= eventInterval) {
    // do this stuff:
    switch (howChatty) {
	    case 1:
		  mp3.playMp3FolderTrack(trackArray[0]);
		  break;		// needed between each case
	    
	    case 2:
		  mp3.playMp3FolderTrack(trackArray[0]);
		  waitMilliseconds(trackInterval1);
		  mp3.playMp3FolderTrack(trackArray[1]);
		  break;
	    
	    case 3:   
	   	mp3.playMp3FolderTrack(trackArray[0]);
		  waitMilliseconds(trackInterval1);
		  mp3.playMp3FolderTrack(trackArray[1]);
		  waitMilliseconds(trackInterval2);
		  mp3.playMp3FolderTrack(trackArray[2]);
		  break;
		  
		  case 4:
		  mp3.playMp3FolderTrack(trackArray[0]);
		  waitMilliseconds(trackInterval1);
		  mp3.playMp3FolderTrack(trackArray[1]);
		  waitMilliseconds(trackInterval2);
		  mp3.playMp3FolderTrack(trackArray[2]);
		  waitMilliseconds(trackInterval3);
		  mp3.playMp3FolderTrack(trackArray[3]);
	    	break;
	    
	    default:
			 // optional, uncomment to include
	    		// if nothing matches case do this.
		 break;
    }
 
    // reset millis for the next iteration
    previousEventMillis = eventMillis;
    waitMilliseconds(1000);			// pause before voidloop restart
  }
}

void setup() 
{
  Serial.begin(115200);

  mp3.begin();

  uint16_t volume = mp3.getVolume();
  mp3.setVolume(20);
  
  uint16_t count = mp3.getTotalTrackCount(DfMp3_PlaySource_Sd);
  }

void waitMilliseconds(uint16_t msWait)
{
  uint32_t start = millis();
  
  while ((millis() - start) < msWait)
  {
    // calling mp3.loop() periodically allows for notifications 
    // to be handled without interrupts
    mp3.loop(); 
    delay(1);
  }
}


void loop() {
  	
	mp3.setVolume(15);
  	mp3.playMp3FolderTrack(2);  		// float sound around 1.33s
  
waitMilliseconds(1250);

// get the current time, for this time around loop
  // all millis() timer checks will use this time stamp
unsigned long currentEventMillis = millis();
    
event(currentEventMillis);    //  calling event loop
  
}
